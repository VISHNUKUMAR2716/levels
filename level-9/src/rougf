 
 task-2
 <!-- <Router> 
       <nav>
        <Link to="/user/1">User 1</Link> | 
        <Link to="/user/2">User 2</Link> | 
        <Link to="/user/3">User 3</Link>
        <Routes>
          <Route path='/Users/:id' element={<User />}/>
        </Routes>
      </nav>
  </Router>
-->
  task-3
  <!--    <Router>
    <Routes>
      <Route path='/' element={<Dashboard />}/>
      <Route path="profile" element={<Profile />} />
      <Route path="settings" element={<Settings />} />
    </Routes>
   </Router> -->
   task-4
   <!-- 
     <div>
    <AuthProvider>
    <Router>
    <nav>
    <ul>
    <li>
    <Link to="/">Dashboard</Link>
    </li>
    <li>
    <Link to="/users">Users</Link>
    </li>
    <li>
    <Link to="/profile">Profile</Link>
    </li>
    <li>
    <Link to="/settings">Settings</Link>
    </li>
    </ul>
    </nav>
    <Routes>
    <Route path="/" element={<Dashboard />} />
    <Route path="/users" element={<User />} />
    <Route path="/profile" element={<Profile />} />
    <Route path="/settings" element={<Settings />} />
    </Routes>
    </Router>
    </AuthProvider> -->
    taks-6
    <!-- 
      const [count,setcount]=useState(0)
  const item =useMemo(()=>generateitem(),[])

  useEffect(()=>{
    const interval =setInterval(()=>{
      setcount((prve)=>prve+1)
    },1000)
    return clearInterval(interval)
  },[])
  return(
    <div>
      <h2>⏱ Counter: {count}</h2>
      <Largelist items={item} />
    </div> -->
     task-7
     <!--    <UseCallbackExample />
   <UsermemoExample /> -->
   task-8
   <!--     <Router>
        <Routes>
          <Route path='/search' element={<Sceach />}/>
        </Routes>
      </Router> -->
      task-9

      <!--   <VirtualList /> -->
      task-10

      <!-- 
        const [products, setProducts] = useState([]);
  const [filter, setFilter] = useState("");

  const fetchData = async () => {
    const res = await fetch("https://dummyjson.com/products?limit=100");
    const data = await res.json();
    setProducts(data.products);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSearch = useCallback(
    debounce((value) => {
      setFilter(value.toLowerCase());
    }, 300),
    []
  );

  const filtered = useMemo(() => {
    return products.filter((p) => p.title.toLowerCase().includes(filter));
  }, [products, filter]);

  return (
    <div style={{ padding: "20px" }}>
      <h1>🚀 Optimized Product Dashboard</h1>
      <input
        placeholder="Search..."
        onChange={(e) => handleSearch(e.target.value)}
        style={{ padding: "10px", width: "300px", marginBottom: "20px" }}
      />

      <ProductList products={filtered} />

      <Suspense fallback={<div>Loading Details...</div>}>
        {/* Lazy loaded when needed */}
        {/* <ProductDetail /> */}
      </Suspense>
    </div>
  );
}; -->